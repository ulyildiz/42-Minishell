#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Function prototypes for helper functions
static int handle_command(t_command **cmds, t_tokens **t, size_t *i);
static int handle_token(t_command **cmds, t_tokens **t, size_t *i);

// Main parser function
int parser(t_main *shell, t_tokens *t, size_t i) {
    t_command *cmds;
    
    if (shell->control == 0) return 1;
    cmds = cmd_struct_create(t);
    if (!cmds) return (perror("Parser"), 0);
    
    shell->cmd = cmds;
    while (t) {
        if (!is_token(t)) {
            if (!handle_command(&cmds, &t, &i)) return 0;
        } else {
            if (!handle_token(&cmds, &t, &i)) return 0;
        }
    }
    
    rdr_position(cmds);
    return 1;
}

// Helper function to handle non-token commands
static int handle_command(t_command **cmds, t_tokens **t, size_t *i) {
    if ((*t)->is_expend == NONE) {
        if (!arrange_split(*cmds, *t, i)) return 0;
    } else {
        (*cmds)->value[(*i)++] = ft_strdup((*t)->value);
    }
    *t = (*t)->next;
    return 1;
}

// Helper function to handle token transitions
static int handle_token(t_command **cmds, t_tokens **t, size_t *i) {
    rdr_position(*cmds);
    *i = 0;
    
    (*cmds)->next = cmd_struct_create(*t);
    if (!(*cmds)->next) return (perror("Parser"), 0);
    
    (*cmds)->where_p = R_P;
    (*cmds)->next->prev = *cmds;
    *cmds = (*cmds)->next;
    (*cmds)->where_p = L_P;
    
    *t = (*t)->next;
    return 1;
}
